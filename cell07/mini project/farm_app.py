from typing import List
from collections import defaultdict

class Task:
    def __init__(self, name: str, date: str, task_type: str):
        self.name = name
        self.date = date
        self.task_type = task_type

    def __str__(self):
        return f"{self.date} - {self.name} (Type {self.task_type})"

class SmartFarmTaskOrganizer:
    def __init__(self):
        self.tasks: List[Task] = []

    def add_task(self, name: str, date: str, task_type: str):
        task = Task(name, date, task_type)
        self.tasks.append(task)
        print("\n‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    def show_all_tasks(self):
        print("\nüìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
        if not self.tasks:
            print("‚ñ≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        else:
            for idx, task in enumerate(self.tasks, 1):
                print(f"{idx}. {task}")

    def delete_task(self, index: int):
        if 0 <= index < len(self.tasks):
            removed = self.tasks.pop(index)
            print(f"\nüóëÔ∏è ‡∏•‡∏ö‡∏á‡∏≤‡∏ô: {removed.name} ‡πÅ‡∏•‡πâ‡∏ß")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏")

    def summarize_tasks_by_type(self):
        summary = defaultdict(int)
        for task in self.tasks:
            summary[task.task_type] += 1

        print("\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:")
        if not summary:
            print("‚ñ≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        else:
            for task_type, count in summary.items():
                print(f"- Type {task_type}: {count} ‡∏á‡∏≤‡∏ô")

def display_menu():
    print("\n====== Smart Farm Task Organizer ======")
    print("1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ü‡∏≤‡∏£‡πå‡∏°")
    print("2. ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    print("3. ‡∏•‡∏ö‡∏á‡∏≤‡∏ô")
    print("4. ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó")
    print("5. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")

def main():
    organizer = SmartFarmTaskOrganizer()

    while True:
        display_menu()
        choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π (1-5): ").strip()

        if choice == "1":
            name = input("üìù ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô: ")
            date = input("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (dd/mm/yyyy): ")
            task_type = input("üìå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô (‡∏û‡∏∑‡∏ä‡∏ú‡∏±‡∏Å/‡∏õ‡∏®‡∏∏‡∏™‡∏±‡∏ï‡∏ß‡πå/‡∏≠‡∏∑‡πà‡∏ô‡πÜ): ").strip().split()[-1]  # ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô Type A
            organizer.add_task(name, date, task_type)

        elif choice == "2":
            organizer.show_all_tasks()

        elif choice == "3":
            organizer.show_all_tasks()
            if organizer.tasks:
                try:
                    index = int(input("‚ùó ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö: ")) - 1
                    organizer.delete_task(index)
                except ValueError:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

        elif choice == "4":
            organizer.summarize_tasks_by_type()

        elif choice == "5":
            print("\nüëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° Smart Farm!")
            break

        else:
            print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1 ‡∏ñ‡∏∂‡∏á 5 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")

if __name__ == "__main__":
    main()